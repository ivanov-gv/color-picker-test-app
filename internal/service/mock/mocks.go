// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ivanov-gv/color-picker-test-app/internal/model"
)

// MockColorInterface is a mock of ColorInterface interface.
type MockColorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockColorInterfaceMockRecorder
}

// MockColorInterfaceMockRecorder is the mock recorder for MockColorInterface.
type MockColorInterfaceMockRecorder struct {
	mock *MockColorInterface
}

// NewMockColorInterface creates a new mock instance.
func NewMockColorInterface(ctrl *gomock.Controller) *MockColorInterface {
	mock := &MockColorInterface{ctrl: ctrl}
	mock.recorder = &MockColorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColorInterface) EXPECT() *MockColorInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockColorInterface) Add(ctx context.Context, userId int, color model.Color) (model.Color, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userId, color)
	ret0, _ := ret[0].(model.Color)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockColorInterfaceMockRecorder) Add(ctx, userId, color interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockColorInterface)(nil).Add), ctx, userId, color)
}

// Delete mocks base method.
func (m *MockColorInterface) Delete(ctx context.Context, userId, colorId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userId, colorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockColorInterfaceMockRecorder) Delete(ctx, userId, colorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockColorInterface)(nil).Delete), ctx, userId, colorId)
}

// Get mocks base method.
func (m *MockColorInterface) Get(ctx context.Context, userId, colorId int) (model.Color, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userId, colorId)
	ret0, _ := ret[0].(model.Color)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockColorInterfaceMockRecorder) Get(ctx, userId, colorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockColorInterface)(nil).Get), ctx, userId, colorId)
}

// GetAll mocks base method.
func (m *MockColorInterface) GetAll(ctx context.Context, userId int) ([]model.Color, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userId)
	ret0, _ := ret[0].([]model.Color)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockColorInterfaceMockRecorder) GetAll(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockColorInterface)(nil).GetAll), ctx, userId)
}

// MockColorDao is a mock of ColorDao interface.
type MockColorDao struct {
	ctrl     *gomock.Controller
	recorder *MockColorDaoMockRecorder
}

// MockColorDaoMockRecorder is the mock recorder for MockColorDao.
type MockColorDaoMockRecorder struct {
	mock *MockColorDao
}

// NewMockColorDao creates a new mock instance.
func NewMockColorDao(ctrl *gomock.Controller) *MockColorDao {
	mock := &MockColorDao{ctrl: ctrl}
	mock.recorder = &MockColorDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColorDao) EXPECT() *MockColorDaoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockColorDao) Add(ctx context.Context, userId int, color model.Color) (model.Color, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userId, color)
	ret0, _ := ret[0].(model.Color)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockColorDaoMockRecorder) Add(ctx, userId, color interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockColorDao)(nil).Add), ctx, userId, color)
}

// Delete mocks base method.
func (m *MockColorDao) Delete(ctx context.Context, userId, colorId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userId, colorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockColorDaoMockRecorder) Delete(ctx, userId, colorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockColorDao)(nil).Delete), ctx, userId, colorId)
}

// Get mocks base method.
func (m *MockColorDao) Get(ctx context.Context, userId, colorId int) (model.Color, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userId, colorId)
	ret0, _ := ret[0].(model.Color)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockColorDaoMockRecorder) Get(ctx, userId, colorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockColorDao)(nil).Get), ctx, userId, colorId)
}

// GetAll mocks base method.
func (m *MockColorDao) GetAll(ctx context.Context, userId int) ([]model.Color, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userId)
	ret0, _ := ret[0].([]model.Color)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockColorDaoMockRecorder) GetAll(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockColorDao)(nil).GetAll), ctx, userId)
}

// MockUserInterface is a mock of UserInterface interface.
type MockUserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserInterfaceMockRecorder
}

// MockUserInterfaceMockRecorder is the mock recorder for MockUserInterface.
type MockUserInterfaceMockRecorder struct {
	mock *MockUserInterface
}

// NewMockUserInterface creates a new mock instance.
func NewMockUserInterface(ctrl *gomock.Controller) *MockUserInterface {
	mock := &MockUserInterface{ctrl: ctrl}
	mock.recorder = &MockUserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInterface) EXPECT() *MockUserInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserInterface) Create(ctx context.Context) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserInterfaceMockRecorder) Create(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserInterface)(nil).Create), ctx)
}

// Exist mocks base method.
func (m *MockUserInterface) Exist(ctx context.Context, userId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", ctx, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockUserInterfaceMockRecorder) Exist(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockUserInterface)(nil).Exist), ctx, userId)
}

// MockUserDao is a mock of UserDao interface.
type MockUserDao struct {
	ctrl     *gomock.Controller
	recorder *MockUserDaoMockRecorder
}

// MockUserDaoMockRecorder is the mock recorder for MockUserDao.
type MockUserDaoMockRecorder struct {
	mock *MockUserDao
}

// NewMockUserDao creates a new mock instance.
func NewMockUserDao(ctrl *gomock.Controller) *MockUserDao {
	mock := &MockUserDao{ctrl: ctrl}
	mock.recorder = &MockUserDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDao) EXPECT() *MockUserDaoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserDao) Create(ctx context.Context) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserDaoMockRecorder) Create(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserDao)(nil).Create), ctx)
}

// Exist mocks base method.
func (m *MockUserDao) Exist(ctx context.Context, userId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", ctx, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockUserDaoMockRecorder) Exist(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockUserDao)(nil).Exist), ctx, userId)
}
